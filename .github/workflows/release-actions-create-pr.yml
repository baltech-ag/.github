name: Release Actions - Create PR
on:
  workflow_call:
    inputs:
      ci-scripts-ref:
        type: string
        required: false
        default: master
jobs:
  create-pr:
    name: Create PR
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'push' && contains(fromJson('["release-major", "release-minor", "release-patch"]'), github.ref_name) && !startsWith(github.event.head_commit.message, '[release]') }}
    steps:
      - name: Check for latest template version
        run: |
          set expectedHash="${{ hashFiles('./ci-scripts/templates/org-release-actions.yml') }}"
          set actualHash="${{ hashFiles('./.github/workflows/org-release-actions.yml') }}"
          if [[ "$expectedHash" != "$actualHash" ]]; then
            echo "::error::Workflow org-release-actions.yml is outdated. Use the latest version from ci-scripts/templates in this project"
            exit 1
          fi
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BALTECH_BOT_ID }}
          private-key: ${{ secrets.BALTECH_BOT_KEY }}
      - name: Configure git
        run: |
          git config --global url.https://${{ steps.generate-token.outputs.token }}@github.com/.insteadOf https://github.com/
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout ci-scripts repository
        uses: actions/checkout@v4
        with:
          repository: baltech-ag/ci-scripts
          ref: ${{ inputs.ci-scripts-ref }}
          path: ci-scripts
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install
      - name: Restore tox environment from cache
        id: tox-cache
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('poetry.lock') }}
      - name: Recreate tox env
        if: steps.tox-cache.outputs.cache-hit != 'true'
        run: tox --recreate
      - name: Update version
        run: python ci-scripts/release_actions.py prepare-next-version
        env:
          CI_PROJECT_NAME: ${{ github.event.repository.name }}
          CI_BRANCH_NAME: ${{ github.ref_name }}
      - name: Create PR for release branch
        run: |
          BASE_BRANCH=$(python ci-scripts/release_actions.py print-base-branch)
          PR_TITLE="[release] ${{ github.event.repository.name }} $(cat VERSION)"
          gh pr create --base $BASE_BRANCH --head ${{ github.ref }} --title "$PR_TITLE"  --body "" --assignee "${{ github.actor }}"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Approve PR
        run: gh pr review ${{ github.ref_name }} --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge PR
        run: gh pr merge ${{ github.ref_name }} --rebase --auto
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Cleanup
        if: always()
        run: rm -rf ci-scripts
